% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{GrossoLocatelliPullanMcRunner}
\alias{GrossoLocatelliPullanMcRunner}
\alias{getBipartitePartitions}
\alias{getAndcheckTopologicalSort}
\alias{getTopologicalSort}
\alias{IsConnected}
\alias{IsAcyclic}
\alias{IsTree}
\alias{IsBipartite}
\alias{IsStronglyConnected}
\alias{IsDAG}
\alias{IsBiNodeConnected}
\alias{IsBiEdgeConnected}
\alias{IsLoopFree}
\alias{IsParallelFree}
\alias{IsSimpleGraph}
\alias{IsEulerian}
\alias{CountBiEdgeConnected}
\alias{CountConnectedComponents}
\alias{CountBiNodeConnectedComponents}
\alias{CountStronglyConnectedComponents}
\alias{FindStronglyConnectedComponents}
\alias{FindStronglyConnectedCutArcs}
\alias{FindBiEdgeConnectedCutEdges}
\alias{FindBiNodeConnectedComponents}
\alias{FindBiNodeConnectedNodes}
\alias{FindConnectedComponents}
\alias{FindBiEdgeConnectedComponents}
\alias{MaximumWeightPerfectMatchingRunner}
\alias{MaximumWeightFractionalPerfectMatchingRunner}
\alias{MaximumWeightFractionalMatchingRunner}
\alias{MaximumWeightMatchingRunner}
\alias{MaximumCardinalityMatchingRunner}
\alias{MaximumCardinalityFractionalMatchingRunner}
\alias{CycleCancellingRunner}
\alias{CapacityScalingRunner}
\alias{CostScalingRunner}
\alias{NetworkSimplexRunner}
\alias{HowardMmcRunner}
\alias{KarpMmcRunner}
\alias{HartmannOrlinMmcRunner}
\alias{PlanarCheckingRunner}
\alias{PlanarColoringRunner}
\alias{PlanarDrawingRunner}
\alias{ChristofidesRunner}
\alias{GreedyTSPRunner}
\alias{InsertionTSPRunner}
\alias{NearestNeighborTSPRunner}
\alias{Opt2TSPRunner}
\title{Acquires bipartite partitions}
\usage{
GrossoLocatelliPullanMcRunner(arcSources, arcTargets, numNodes)

getBipartitePartitions(arcSources, arcTargets, numNodes)

getAndcheckTopologicalSort(arcSources, arcTargets, numNodes)

getTopologicalSort(arcSources, arcTargets, numNodes)

IsConnected(arcSources, arcTargets, numNodes)

IsAcyclic(arcSources, arcTargets, numNodes)

IsTree(arcSources, arcTargets, numNodes)

IsBipartite(arcSources, arcTargets, numNodes)

IsStronglyConnected(arcSources, arcTargets, numNodes)

IsDAG(arcSources, arcTargets, numNodes)

IsBiNodeConnected(arcSources, arcTargets, numNodes)

IsBiEdgeConnected(arcSources, arcTargets, numNodes)

IsLoopFree(arcSources, arcTargets, numNodes)

IsParallelFree(arcSources, arcTargets, numNodes)

IsSimpleGraph(arcSources, arcTargets, numNodes)

IsEulerian(arcSources, arcTargets, numNodes)

CountBiEdgeConnected(arcSources, arcTargets, numNodes)

CountConnectedComponents(arcSources, arcTargets, numNodes)

CountBiNodeConnectedComponents(arcSources, arcTargets, numNodes)

CountStronglyConnectedComponents(arcSources, arcTargets, numNodes)

FindStronglyConnectedComponents(arcSources, arcTargets, numNodes)

FindStronglyConnectedCutArcs(arcSources, arcTargets, numNodes)

FindBiEdgeConnectedCutEdges(arcSources, arcTargets, numNodes)

FindBiNodeConnectedComponents(arcSources, arcTargets, numNodes)

FindBiNodeConnectedNodes(arcSources, arcTargets, numNodes)

FindConnectedComponents(arcSources, arcTargets, numNodes)

FindBiEdgeConnectedComponents(arcSources, arcTargets, numNodes)

MaximumWeightPerfectMatchingRunner(
  arcSources,
  arcTargets,
  arcWeights,
  numNodes
)

MaximumWeightFractionalPerfectMatchingRunner(
  arcSources,
  arcTargets,
  arcWeights,
  numNodes
)

MaximumWeightFractionalMatchingRunner(
  arcSources,
  arcTargets,
  arcWeights,
  numNodes
)

MaximumWeightMatchingRunner(arcSources, arcTargets, arcWeights, numNodes)

MaximumCardinalityMatchingRunner(arcSources, arcTargets, numNodes)

MaximumCardinalityFractionalMatchingRunner(arcSources, arcTargets, numNodes)

CycleCancellingRunner(
  arcSources,
  arcTargets,
  arcDistances,
  nodeSupplies,
  numNodes
)

CapacityScalingRunner(
  arcSources,
  arcTargets,
  arcDistances,
  nodeSupplies,
  numNodes
)

CostScalingRunner(arcSources, arcTargets, arcDistances, nodeSupplies, numNodes)

NetworkSimplexRunner(
  arcSources,
  arcTargets,
  arcDistances,
  nodeSupplies,
  numNodes
)

HowardMmcRunner(arcSources, arcTargets, arcDistances, numNodes)

KarpMmcRunner(arcSources, arcTargets, arcDistances, numNodes)

HartmannOrlinMmcRunner(arcSources, arcTargets, arcDistances, numNodes)

PlanarCheckingRunner(arcSources, arcTargets, numNodes)

PlanarColoringRunner(arcSources, arcTargets, numNodes, useFiveAlg = TRUE)

PlanarDrawingRunner(arcSources, arcTargets, numNodes)

ChristofidesRunner(
  arcSources,
  arcTargets,
  arcDistances,
  numNodes,
  defaultEdgeWeight = 999999L
)

GreedyTSPRunner(
  arcSources,
  arcTargets,
  arcDistances,
  numNodes,
  defaultEdgeWeight = 999999L
)

InsertionTSPRunner(
  arcSources,
  arcTargets,
  arcDistances,
  numNodes,
  defaultEdgeWeight = 999999L
)

NearestNeighborTSPRunner(
  arcSources,
  arcTargets,
  arcDistances,
  numNodes,
  defaultEdgeWeight = 999999L
)

Opt2TSPRunner(
  arcSources,
  arcTargets,
  arcDistances,
  numNodes,
  defaultEdgeWeight = 999999L
)
}
\arguments{
\item{arcSources}{A vector of integers containing the source vertices of the edges}

\item{arcTargets}{A vector of integers containing the destination verctices of the edges}

\item{numNodes}{node nodes}

\item{arcWeights}{arc weights}

\item{arcDistances}{arc distances}

\item{nodeSupplies}{node supplies}

\item{useFiveAlg}{use five alg}

\item{defaultEdgeWeight}{default edge weight}
}
\value{
An R List containing (1) A boolean stating if the graph is bipartite, and (2) an std::vector of length numNodes, containing the partition for each node

An R List containing (1) A boolean stating if the graph is a dag, and (2) an std::vector of length numNodes, containing the index of vertex i in the ordering at location i

An R Numeric Vector of length numNodes, containing the index of vertex i in the ordering at location i.

A boolean stating if we have a connected graph or not

A boolean stating if we have a connected graph or not

A boolean stating if we have a tree

A boolean stating if we have a bipartite graph or not

A boolean stating if we have a strongly connected graph or not

A boolean stating if we have a DAG or not

Stuff
}
\description{
Acquires bipartite partitions

Gets the topological sort on a list of graphs

Gets the topological sort on a list of graphs

Checks if a graph is connected

Checks if a graph is acyclic

Checks if a graph is a tree

Checks if a graph is bipartite

Checks if a graph is strongly connected

Checks if a graph is a DAG

Checks if a graph is bi-connected
}
